name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning and vulnerability checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level=high --production
          cd ../frontend && npm audit --audit-level=high --production
        continue-on-error: true

  # Code quality checks for backend
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Check code formatting
        run: npx prettier --check src/

  # Code quality checks for frontend
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Check Next.js build
        run: npm run build

  # Backend testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [backend-quality]
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: newtube_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:init
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/newtube_test
          REDIS_URL: redis://localhost:6379

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/newtube_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret

      - name: Run integration tests
        run: npm run test:api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/newtube_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: backend/coverage
          flags: backend

  # Frontend testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [frontend-quality]
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: frontend/coverage
          flags: frontend

  # E2E testing with Playwright
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:4000/health; do sleep 5; done'

      - name: Install Playwright
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Stop services
        if: always()
        run: docker-compose down

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
          sleep 30

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run scripts/performance-test.js
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:4000

      - name: Stop services
        if: always()
        run: docker-compose down

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security, backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          target: production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          target: production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Bundle analysis for frontend
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: [frontend-quality]
    if: github.event_name == 'pull_request'

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npx next-bundle-analyzer

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sh .next/static/chunks/pages/_app-*.js | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # Check if bundle exceeds 180KB gzipped (roughly 540KB uncompressed)
          SIZE_BYTES=$(du -b .next/static/chunks/pages/_app-*.js | cut -f1)
          MAX_SIZE=552960  # 540KB
          if [ $SIZE_BYTES -gt $MAX_SIZE ]; then
            echo "❌ Bundle size exceeds limit: $SIZE_BYTES bytes > $MAX_SIZE bytes"
            exit 1
          else
            echo "✅ Bundle size within limit: $SIZE_BYTES bytes"
          fi

  # Notification on completion
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [security, backend-test, frontend-test, e2e-test, build]
    if: always()

    steps:
      - name: Check job statuses
        id: check
        run: |
          if [[ "${{ needs.security.result }}" == "success" && 
                "${{ needs.backend-test.result }}" == "success" && 
                "${{ needs.frontend-test.result }}" == "success" && 
                "${{ needs.e2e-test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify success
        if: steps.check.outputs.status == 'success'
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Security scan complete"
          echo "✅ Code quality checks passed"
          echo "✅ All tests passed"
          echo "✅ Docker images built"

      - name: Notify failure
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "❌ CI pipeline failed"
          echo "Security: ${{ needs.security.result }}"
          echo "Backend Tests: ${{ needs.backend-test.result }}"
          echo "Frontend Tests: ${{ needs.frontend-test.result }}"
          echo "E2E Tests: ${{ needs.e2e-test.result }}"
          echo "Build: ${{ needs.build.result }}"