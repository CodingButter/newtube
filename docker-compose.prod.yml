version: '3.8'

services:
  # Frontend - Next.js Application (Production)
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
      target: production
    container_name: newtube-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://backend:4000
    networks:
      - newtube-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Backend - Node.js API (Production)
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: newtube-backend-prod
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=4000
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - VIMEO_CLIENT_ID=${VIMEO_CLIENT_ID}
      - VIMEO_CLIENT_SECRET=${VIMEO_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - newtube-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M

  # Neo4j - Knowledge Graph Database (Production)
  neo4j:
    image: neo4j:5-community
    container_name: newtube-neo4j-prod
    restart: unless-stopped
    ports:
      - "7687:7687"  # Only expose Bolt in production
    environment:
      # Authentication
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      # Memory configuration for production
      NEO4J_server_memory_heap_initial__size: 1G
      NEO4J_server_memory_heap_max__size: 2G
      NEO4J_server_memory_pagecache_size: 1G
      # APOC plugin
      NEO4J_PLUGINS: '["apoc"]'
      # Accept license
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
      # Security
      NEO4J_server_bolt_listen__address: 0.0.0.0:7687
      NEO4J_server_http_listen__address: 127.0.0.1:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - newtube-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "MATCH () RETURN count(*) as count"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # PostgreSQL - Production Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: newtube-postgres-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: newtube
      POSTGRES_USER: newtube_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Production performance tuning
      POSTGRES_INIT_ARGS: "--max_connections=400 --shared_buffers=256MB"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./configs/postgresql.prod.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - newtube-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newtube_user -d newtube"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis - Production Cache
  redis:
    image: redis:7-alpine
    container_name: newtube-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./configs/redis.prod.conf:/etc/redis/redis.conf:ro
    networks:
      - newtube-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

networks:
  newtube-network:
    driver: bridge
    name: newtube-network-prod

volumes:
  neo4j_data:
  neo4j_logs:
  postgres_data:
  redis_data: