version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
      target: development
    container_name: newtube-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://backend:4000
    volumes:
      # Mount source code for hot reload
      - ../src:/app/src:cached
      - ../public:/app/public:cached
      - ../components:/app/components:cached
      - ../pages:/app/pages:cached
      - ../app:/app/app:cached
      - ../styles:/app/styles:cached
      - ../package.json:/app/package.json:ro
      - ../next.config.js:/app/next.config.js:ro
      - ../tailwind.config.js:/app/tailwind.config.js:ro
      - ../tsconfig.json:/app/tsconfig.json:ro
      # Node modules cache
      - frontend_node_modules:/app/node_modules
    networks:
      - newtube-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Backend - Node.js API
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: development
    container_name: newtube-backend
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://newtube_user:newtube_password@postgres:5432/newtube
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=memento_password
      - JWT_SECRET=dev_jwt_secret_change_in_production
      - PORT=4000
    volumes:
      # Mount source code for hot reload
      - ../backend:/app:cached
      - ../package.json:/app/package.json:ro
      # Node modules cache
      - backend_node_modules:/app/node_modules
    networks:
      - newtube-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Neo4j - Knowledge Graph Database for Memento MCP
  neo4j:
    image: neo4j:5-community
    container_name: newtube-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      # Authentication - matches .mcp.json configuration
      NEO4J_AUTH: neo4j/memento_password
      # Memory configuration
      NEO4J_server_memory_heap_initial__size: 512M
      NEO4J_server_memory_heap_max__size: 1G
      NEO4J_server_memory_pagecache_size: 512M
      # APOC plugin (useful for advanced graph operations)
      NEO4J_PLUGINS: '["apoc"]'
      # Accept license
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - newtube-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "memento_password", "MATCH () RETURN count(*) as count"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # PostgreSQL - Main Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: newtube-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: newtube
      POSTGRES_USER: newtube_user
      POSTGRES_PASSWORD: newtube_password
      # Performance tuning
      POSTGRES_INIT_ARGS: "--max_connections=200"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - newtube-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newtube_user -d newtube"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: newtube-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - newtube-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  newtube-network:
    driver: bridge
    name: newtube-network

volumes:
  # Application volumes
  frontend_node_modules:
  backend_node_modules:
  
  # Database volumes
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  postgres_data:
  redis_data: