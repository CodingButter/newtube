# Frontend Dockerfile for NEWTUBE AI-First Interface
# Optimized for real-time AI UI generation and Next.js 15 with Turbopack

# Development stage
FROM node:20-alpine AS development

WORKDIR /app

# Install dependencies for hot reload
RUN apk add --no-cache curl bash

# Copy package files first for better caching
COPY package*.json ./
COPY tsconfig.json ./
COPY next.config.js ./
COPY tailwind.config.js ./

# Install dependencies
RUN npm ci

# Copy source code (will be overridden by volumes in dev)
COPY src/ ./src/
COPY public/ ./public/
COPY components/ ./components/
COPY lib/ ./lib/
COPY app/ ./app/

# Create health check endpoint for AI interface
RUN mkdir -p pages/api && \
    echo 'export default function handler(req, res) { res.status(200).json({ status: "healthy", timestamp: new Date().toISOString() }); }' > pages/api/health.js

# Expose Next.js dev server port
EXPOSE 3000

# Development command with Turbopack for hot reload
CMD ["npm", "run", "dev"]

# Build stage for production
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache libc6-compat

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY next.config.js ./
COPY tailwind.config.js ./

# Install all dependencies including devDependencies
RUN npm ci

# Copy source code for build
COPY src/ ./src/
COPY public/ ./public/
COPY components/ ./components/
COPY lib/ ./lib/
COPY app/ ./app/

# Environment variables for build optimization
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the application with Turbopack
RUN npm run build

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Install production dependencies and security updates
RUN apk add --no-cache \
    curl \
    dumb-init \
    && apk upgrade --no-cache

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy package files for production dependencies
COPY package*.json ./
COPY next.config.js ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Set user
USER nextjs

# Expose port
EXPOSE 3000

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]

# Staging stage (for testing)
FROM production AS staging

# Switch back to root for staging tools
USER root

# Install additional debugging tools for staging
RUN apk add --no-cache \
    htop \
    strace \
    tcpdump

# Switch back to nextjs user
USER nextjs

# Same command as production
CMD ["node", "server.js"]