// NEWTUBE Database Schema
// Streaming aggregator database for users, connections, layouts, panels, lists, and preferences
// See: https://github.com/CodingButter/newtube/blob/main/docs/Project_Document.md

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CORE USER MANAGEMENT
// ================================

/// User accounts with settings and preferences
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  clerkId     String?   @unique // Clerk authentication ID
  username    String?   @unique
  displayName String?
  avatar      String?   // URL to avatar image
  
  // JSON field for flexible user settings
  settingsJson Json     @default("{}")
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  
  // Status and flags
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  
  // Relations
  connections    Connection[]
  layouts        Layout[]
  lists          List[]
  preferences    Preference[]
  userEmbedding  UserEmbedding?
  searchEmbeddings SearchEmbedding[]
  
  @@map("users")
}

// ================================
// EXTERNAL PLATFORM CONNECTIONS
// ================================

/// OAuth connections to external platforms (YouTube, Vimeo, Nebula)
model Connection {
  id       String @id @default(cuid())
  userId   String
  provider String // 'youtube', 'vimeo', 'nebula'
  
  // OAuth data (encrypted)
  accessTokenEnc  String    // Encrypted access token
  refreshTokenEnc String?   // Encrypted refresh token (if available)
  expiresAt       DateTime? // Token expiration
  
  // Permission scopes granted
  scopes  String[] @default([])
  
  // Connection status
  status     ConnectionStatus @default(ACTIVE)
  lastSyncAt DateTime?
  
  // Metadata
  providerUserId   String? // External platform user ID
  providerUsername String? // External platform username
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
  @@map("connections")
}

enum ConnectionStatus {
  ACTIVE
  EXPIRED
  REVOKED
  ERROR
}

// ================================
// LAYOUT SYSTEM
// ================================

/// User-defined dashboard layouts with drag-and-drop panels
model Layout {
  id     String @id @default(cuid())
  userId String
  name   String
  
  // Layout configuration
  theme         String? @default("default")
  gridSpecJson  Json    // Grid layout specification with panel positions
  
  // Metadata
  isDefault     Boolean @default(false)
  isPublic      Boolean @default(false)
  description   String?
  tags          String[] @default([])
  
  // Version control
  version   Int @default(1)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  layoutPanels LayoutPanel[]
  
  @@map("layouts")
}

/// Panel library/definitions - reusable panel configurations
model Panel {
  id   String    @id @default(cuid())
  type PanelType
  
  // Panel configuration
  name         String
  description  String?
  propsJson    Json    @default("{}") // Default props for this panel type
  
  // Metadata
  category     String?  // e.g., "video", "social", "tools"
  tags         String[] @default([])
  isBuiltIn    Boolean  @default(false) // System-defined vs user-created
  
  // Version control
  version      Int      @default(1)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  layoutPanels LayoutPanel[]
  
  @@map("panels")
}

/// Junction table for layouts and their panel instances
model LayoutPanel {
  id       String @id @default(cuid())
  layoutId String
  panelId  String
  
  // Panel instance configuration
  propsJson Json @default("{}") // Instance-specific props
  
  // Grid position and sizing
  gridX      Int
  gridY      Int
  gridWidth  Int
  gridHeight Int
  
  // Display options
  isVisible  Boolean @default(true)
  zIndex     Int     @default(0)
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  layout Layout @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  panel  Panel  @relation(fields: [panelId], references: [id], onDelete: Cascade)
  
  @@unique([layoutId, panelId])
  @@map("layout_panels")
}

enum PanelType {
  VIDEO_FEED       // Video listing/grid
  VIDEO_PLAYER     // Embedded video player
  SEARCH           // Search interface
  FILTERS          // Content filters
  PLAYLISTS        // Playlist management
  SUBSCRIPTIONS    // Subscription feed
  TRENDING         // Trending content
  RECOMMENDATIONS  // AI recommendations
  SETTINGS         // User settings
  ANALYTICS        // Usage analytics
  CUSTOM           // User-defined custom panel
}

// ================================
// USER CONTENT ORGANIZATION
// ================================

/// User-created lists (playlists, smart lists, etc.)
model List {
  id     String   @id @default(cuid())
  userId String
  name   String
  type   ListType
  
  // List configuration
  description String?
  isPublic    Boolean @default(false)
  rulesJson   Json    @default("{}") // Smart list rules or static content
  
  // Metadata
  tags        String[] @default([])
  thumbnail   String?  // URL to thumbnail image
  itemCount   Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastSyncAt  DateTime?
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  listItems  ListItem[]
  
  @@map("lists")
}

enum ListType {
  PLAYLIST  // Manual playlist
  SMART     // Smart list with rules
  FAVORITES // User favorites
  WATCHLIST // Watch later
  HISTORY   // Watch history
}

/// Items within user lists
model ListItem {
  id     String @id @default(cuid())
  listId String
  
  // External content reference
  platformId   String // YouTube video ID, Vimeo ID, etc.
  platform     String // 'youtube', 'vimeo', 'nebula'
  contentType  String @default("video") // Future: audio, article, etc.
  
  // Cached metadata
  title        String?
  description  String?
  thumbnailUrl String?
  duration     Int?    // Duration in seconds
  publishedAt  DateTime?
  
  // List-specific data
  position     Int     @default(0)
  addedAt      DateTime @default(now())
  notes        String? // User notes about this item
  
  // Engagement tracking
  watchProgress Float?  @default(0) // 0.0 to 1.0
  rating        Int?    // 1-5 stars
  isFavorite    Boolean @default(false)
  
  // Relations
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  
  @@unique([listId, platformId, platform])
  @@map("list_items")
}

// ================================
// USER PREFERENCES & SETTINGS
// ================================

/// Fine-grained user preferences and settings
model Preference {
  id     String @id @default(cuid())
  userId String
  key    String // Hierarchical key like "ui.theme" or "ai.recommendations.enabled"
  
  // Flexible value storage
  valueJson Json
  
  // Metadata
  category    String? // e.g., "ui", "ai", "notifications", "privacy"
  description String?
  isUserSet   Boolean @default(true) // false for system defaults
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@map("preferences")
}

// ================================
// SYSTEM TABLES
// ================================

/// Database migrations tracking
model Migration {
  id          String   @id @default(cuid())
  name        String   @unique
  executedAt  DateTime @default(now())
  checksum    String?
  
  @@map("migrations")
}

/// System configuration and feature flags
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  description String?
  category    String? // e.g., "feature_flags", "api_limits", "maintenance"
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
}

// ================================
// AI/ML VECTOR EMBEDDINGS (pgvector)
// ================================

/// Video content embeddings for personalization and search
model VideoEmbedding {
  id           String   @id @default(cuid())
  platformId   String   // YouTube video ID, Vimeo ID, etc.
  platform     String   // 'youtube', 'vimeo', 'nebula'
  
  // Video metadata
  title        String?
  description  String?
  tags         String[] @default([])
  category     String?
  duration     Int?     // Duration in seconds
  publishedAt  DateTime?
  channelId    String?
  channelName  String?
  
  // Embeddings (1536 dimensions for OpenAI text-embedding-3-small)
  titleEmbedding       Unsupported("vector(1536)")?
  descriptionEmbedding Unsupported("vector(1536)")?
  combinedEmbedding    Unsupported("vector(1536)")   // Weighted combination
  
  // Embedding metadata
  embeddingModel      String   @default("text-embedding-3-small")
  embeddingVersion    String   @default("1.0")
  processingStatus    EmbeddingStatus @default(PENDING)
  qualityScore        Float?   // 0.0 to 1.0
  
  // Processing timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastProcessedAt     DateTime?
  
  @@unique([platformId, platform])
  @@map("video_embeddings")
}

/// User preference embeddings for personalization
model UserEmbedding {
  id       String @id @default(cuid())
  userId   String @unique
  
  // User preference vector derived from interactions
  preferenceEmbedding Unsupported("vector(1536)")
  
  // Metadata
  confidenceScore     Float    @default(0.5) // 0.0 to 1.0
  interactionCount    Int      @default(0)
  lastUpdateThreshold Int      @default(10)  // Min interactions for update
  
  // Processing info
  embeddingModel      String   @default("text-embedding-3-small")
  embeddingVersion    String   @default("1.0")
  processingStatus    EmbeddingStatus @default(PENDING)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastCalculatedAt    DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_embeddings")
}

/// Comment embeddings for toxicity detection and relevance scoring
model CommentEmbedding {
  id         String @id @default(cuid())
  platformId String // Original comment ID from platform
  platform   String
  videoId    String // Associated video
  
  // Comment content
  content           String
  authorName        String?
  publishedAt       DateTime?
  
  // Embeddings and analysis
  contentEmbedding  Unsupported("vector(1536)")
  toxicityScore     Float?   // 0.0 to 1.0 (higher = more toxic)
  relevanceScore    Float?   // 0.0 to 1.0 (higher = more relevant to video)
  sentimentScore    Float?   // -1.0 to 1.0 (negative to positive)
  
  // Processing metadata
  embeddingModel    String   @default("text-embedding-3-small")
  embeddingVersion  String   @default("1.0")
  processingStatus  EmbeddingStatus @default(PENDING)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([platformId, platform])
  @@map("comment_embeddings")
}

/// Search query embeddings for query expansion and personalization
model SearchEmbedding {
  id       String @id @default(cuid())
  userId   String?
  query    String
  
  // Query analysis
  queryEmbedding    Unsupported("vector(1536)")
  intent            String?  // e.g., "entertainment", "educational", "music"
  entities          String[] @default([]) // Extracted entities from query
  
  // Usage statistics
  searchCount       Int      @default(1)
  clickThrough      Float    @default(0.0) // Click-through rate
  avgWatchTime      Float?   // Average watch time for results
  
  // Processing metadata
  embeddingModel    String   @default("text-embedding-3-small")
  embeddingVersion  String   @default("1.0")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastSearchedAt    DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@unique([query, userId])
  @@map("search_embeddings")
}

/// Batch processing jobs for embeddings
model EmbeddingJob {
  id          String    @id @default(cuid())
  type        JobType
  status      JobStatus @default(PENDING)
  
  // Job configuration
  batchSize   Int       @default(100)
  priority    Int       @default(0)  // Higher = more priority
  configJson  Json      @default("{}")
  
  // Progress tracking
  totalItems      Int     @default(0)
  processedItems  Int     @default(0)
  failedItems     Int     @default(0)
  successItems    Int     @default(0)
  
  // Error handling
  errorMessage    String?
  retryCount      Int     @default(0)
  maxRetries      Int     @default(3)
  
  // Performance metrics
  startedAt       DateTime?
  completedAt     DateTime?
  avgProcessingTime Float? // Average time per item in seconds
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("embedding_jobs")
}

enum EmbeddingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  STALE      // Needs update
}

enum JobType {
  VIDEO_EMBEDDING
  USER_EMBEDDING
  COMMENT_EMBEDDING
  SEARCH_EMBEDDING
  BATCH_UPDATE
  INCREMENTAL_UPDATE
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  RETRYING
}

// ================================
// INDEXES FOR PERFORMANCE
// ================================

// Additional indexes are automatically created by Prisma for:
// - Primary keys (@id)
// - Unique constraints (@unique)
// - Foreign key relations

// Custom indexes for query optimization:
// - User email lookups
// - Connection status queries
// - Layout user queries
// - List item position ordering
// - Preference key-based lookups

// Vector similarity indexes (created via raw SQL):
// - HNSW indexes on all embedding columns for fast similarity search
// - GIN indexes for tag and entity arrays
