
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  clerkId: 'clerkId',
  username: 'username',
  displayName: 'displayName',
  avatar: 'avatar',
  settingsJson: 'settingsJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive',
  isVerified: 'isVerified'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  accessTokenEnc: 'accessTokenEnc',
  refreshTokenEnc: 'refreshTokenEnc',
  expiresAt: 'expiresAt',
  scopes: 'scopes',
  status: 'status',
  lastSyncAt: 'lastSyncAt',
  providerUserId: 'providerUserId',
  providerUsername: 'providerUsername',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LayoutScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  theme: 'theme',
  gridSpecJson: 'gridSpecJson',
  isDefault: 'isDefault',
  isPublic: 'isPublic',
  description: 'description',
  tags: 'tags',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PanelScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  propsJson: 'propsJson',
  category: 'category',
  tags: 'tags',
  isBuiltIn: 'isBuiltIn',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LayoutPanelScalarFieldEnum = {
  id: 'id',
  layoutId: 'layoutId',
  panelId: 'panelId',
  propsJson: 'propsJson',
  gridX: 'gridX',
  gridY: 'gridY',
  gridWidth: 'gridWidth',
  gridHeight: 'gridHeight',
  isVisible: 'isVisible',
  zIndex: 'zIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  description: 'description',
  isPublic: 'isPublic',
  rulesJson: 'rulesJson',
  tags: 'tags',
  thumbnail: 'thumbnail',
  itemCount: 'itemCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastSyncAt: 'lastSyncAt'
};

exports.Prisma.ListItemScalarFieldEnum = {
  id: 'id',
  listId: 'listId',
  platformId: 'platformId',
  platform: 'platform',
  contentType: 'contentType',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  duration: 'duration',
  publishedAt: 'publishedAt',
  position: 'position',
  addedAt: 'addedAt',
  notes: 'notes',
  watchProgress: 'watchProgress',
  rating: 'rating',
  isFavorite: 'isFavorite'
};

exports.Prisma.PreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  key: 'key',
  valueJson: 'valueJson',
  category: 'category',
  description: 'description',
  isUserSet: 'isUserSet',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  currentStep: 'currentStep',
  isCompleted: 'isCompleted',
  isVoiceMode: 'isVoiceMode',
  selectedInterests: 'selectedInterests',
  videoRatings: 'videoRatings',
  layoutPreferences: 'layoutPreferences',
  llmProvider: 'llmProvider',
  llmApiKey: 'llmApiKey',
  conversationId: 'conversationId',
  stepProgress: 'stepProgress',
  completedSteps: 'completedSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt',
  completedAt: 'completedAt'
};

exports.Prisma.ConversationLogScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  messageId: 'messageId',
  tourStep: 'tourStep',
  actionType: 'actionType',
  metadata: 'metadata',
  tokensUsed: 'tokensUsed',
  responseTimeMs: 'responseTimeMs',
  llmProvider: 'llmProvider',
  createdAt: 'createdAt'
};

exports.Prisma.TourInteractionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  tourStep: 'tourStep',
  actionType: 'actionType',
  actionData: 'actionData',
  timeSpentMs: 'timeSpentMs',
  wasSkipped: 'wasSkipped',
  satisfaction: 'satisfaction',
  createdAt: 'createdAt'
};

exports.Prisma.LocalStorageSyncScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  interests: 'interests',
  videoRatings: 'videoRatings',
  onboardingStep: 'onboardingStep',
  layoutData: 'layoutData',
  isRegistered: 'isRegistered',
  userId: 'userId',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.MigrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  executedAt: 'executedAt',
  checksum: 'checksum'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED',
  ERROR: 'ERROR'
};

exports.PanelType = exports.$Enums.PanelType = {
  VIDEO_FEED: 'VIDEO_FEED',
  VIDEO_PLAYER: 'VIDEO_PLAYER',
  SEARCH: 'SEARCH',
  FILTERS: 'FILTERS',
  PLAYLISTS: 'PLAYLISTS',
  SUBSCRIPTIONS: 'SUBSCRIPTIONS',
  TRENDING: 'TRENDING',
  RECOMMENDATIONS: 'RECOMMENDATIONS',
  SETTINGS: 'SETTINGS',
  ANALYTICS: 'ANALYTICS',
  CUSTOM: 'CUSTOM'
};

exports.ListType = exports.$Enums.ListType = {
  PLAYLIST: 'PLAYLIST',
  SMART: 'SMART',
  FAVORITES: 'FAVORITES',
  WATCHLIST: 'WATCHLIST',
  HISTORY: 'HISTORY'
};

exports.TourStep = exports.$Enums.TourStep = {
  WELCOME: 'WELCOME',
  INTRODUCTION: 'INTRODUCTION',
  INTERESTS: 'INTERESTS',
  VIDEO_RATING: 'VIDEO_RATING',
  LAYOUT_BUILDING: 'LAYOUT_BUILDING',
  REGISTRATION: 'REGISTRATION',
  COMPLETED: 'COMPLETED'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Connection: 'Connection',
  Layout: 'Layout',
  Panel: 'Panel',
  LayoutPanel: 'LayoutPanel',
  List: 'List',
  ListItem: 'ListItem',
  Preference: 'Preference',
  ConversationSession: 'ConversationSession',
  ConversationLog: 'ConversationLog',
  TourInteraction: 'TourInteraction',
  LocalStorageSync: 'LocalStorageSync',
  Migration: 'Migration',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
