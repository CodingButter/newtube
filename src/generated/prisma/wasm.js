
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  clerkId: 'clerkId',
  username: 'username',
  displayName: 'displayName',
  avatar: 'avatar',
  settingsJson: 'settingsJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive',
  isVerified: 'isVerified'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  accessTokenEnc: 'accessTokenEnc',
  refreshTokenEnc: 'refreshTokenEnc',
  expiresAt: 'expiresAt',
  scopes: 'scopes',
  status: 'status',
  lastSyncAt: 'lastSyncAt',
  providerUserId: 'providerUserId',
  providerUsername: 'providerUsername',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LayoutScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  theme: 'theme',
  gridSpecJson: 'gridSpecJson',
  isDefault: 'isDefault',
  isPublic: 'isPublic',
  description: 'description',
  tags: 'tags',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PanelScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  propsJson: 'propsJson',
  category: 'category',
  tags: 'tags',
  isBuiltIn: 'isBuiltIn',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LayoutPanelScalarFieldEnum = {
  id: 'id',
  layoutId: 'layoutId',
  panelId: 'panelId',
  propsJson: 'propsJson',
  gridX: 'gridX',
  gridY: 'gridY',
  gridWidth: 'gridWidth',
  gridHeight: 'gridHeight',
  isVisible: 'isVisible',
  zIndex: 'zIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  description: 'description',
  isPublic: 'isPublic',
  rulesJson: 'rulesJson',
  tags: 'tags',
  thumbnail: 'thumbnail',
  itemCount: 'itemCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastSyncAt: 'lastSyncAt'
};

exports.Prisma.ListItemScalarFieldEnum = {
  id: 'id',
  listId: 'listId',
  platformId: 'platformId',
  platform: 'platform',
  contentType: 'contentType',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  duration: 'duration',
  publishedAt: 'publishedAt',
  position: 'position',
  addedAt: 'addedAt',
  notes: 'notes',
  watchProgress: 'watchProgress',
  rating: 'rating',
  isFavorite: 'isFavorite'
};

exports.Prisma.PreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  key: 'key',
  valueJson: 'valueJson',
  category: 'category',
  description: 'description',
  isUserSet: 'isUserSet',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  currentStep: 'currentStep',
  isCompleted: 'isCompleted',
  isVoiceMode: 'isVoiceMode',
  selectedInterests: 'selectedInterests',
  videoRatings: 'videoRatings',
  layoutPreferences: 'layoutPreferences',
  llmProvider: 'llmProvider',
  llmApiKey: 'llmApiKey',
  conversationId: 'conversationId',
  stepProgress: 'stepProgress',
  completedSteps: 'completedSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt',
  completedAt: 'completedAt'
};

exports.Prisma.ConversationLogScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  messageId: 'messageId',
  tourStep: 'tourStep',
  actionType: 'actionType',
  metadata: 'metadata',
  tokensUsed: 'tokensUsed',
  responseTimeMs: 'responseTimeMs',
  llmProvider: 'llmProvider',
  createdAt: 'createdAt'
};

exports.Prisma.TourInteractionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  tourStep: 'tourStep',
  actionType: 'actionType',
  actionData: 'actionData',
  timeSpentMs: 'timeSpentMs',
  wasSkipped: 'wasSkipped',
  satisfaction: 'satisfaction',
  createdAt: 'createdAt'
};

exports.Prisma.LocalStorageSyncScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  interests: 'interests',
  videoRatings: 'videoRatings',
  onboardingStep: 'onboardingStep',
  layoutData: 'layoutData',
  isRegistered: 'isRegistered',
  userId: 'userId',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.MigrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  executedAt: 'executedAt',
  checksum: 'checksum'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED',
  ERROR: 'ERROR'
};

exports.PanelType = exports.$Enums.PanelType = {
  VIDEO_FEED: 'VIDEO_FEED',
  VIDEO_PLAYER: 'VIDEO_PLAYER',
  SEARCH: 'SEARCH',
  FILTERS: 'FILTERS',
  PLAYLISTS: 'PLAYLISTS',
  SUBSCRIPTIONS: 'SUBSCRIPTIONS',
  TRENDING: 'TRENDING',
  RECOMMENDATIONS: 'RECOMMENDATIONS',
  SETTINGS: 'SETTINGS',
  ANALYTICS: 'ANALYTICS',
  CUSTOM: 'CUSTOM'
};

exports.ListType = exports.$Enums.ListType = {
  PLAYLIST: 'PLAYLIST',
  SMART: 'SMART',
  FAVORITES: 'FAVORITES',
  WATCHLIST: 'WATCHLIST',
  HISTORY: 'HISTORY'
};

exports.TourStep = exports.$Enums.TourStep = {
  WELCOME: 'WELCOME',
  INTRODUCTION: 'INTRODUCTION',
  INTERESTS: 'INTERESTS',
  VIDEO_RATING: 'VIDEO_RATING',
  LAYOUT_BUILDING: 'LAYOUT_BUILDING',
  REGISTRATION: 'REGISTRATION',
  COMPLETED: 'COMPLETED'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Connection: 'Connection',
  Layout: 'Layout',
  Panel: 'Panel',
  LayoutPanel: 'LayoutPanel',
  List: 'List',
  ListItem: 'ListItem',
  Preference: 'Preference',
  ConversationSession: 'ConversationSession',
  ConversationLog: 'ConversationLog',
  TourInteraction: 'TourInteraction',
  LocalStorageSync: 'LocalStorageSync',
  Migration: 'Migration',
  SystemConfig: 'SystemConfig'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/codingbutter/com/newtube/www/worktrees/frontend-build-fixes/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/codingbutter/com/newtube/www/worktrees/frontend-build-fixes/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// NEWTUBE Database Schema\n// Streaming aggregator database for users, connections, layouts, panels, lists, and preferences\n// See: https://github.com/CodingButter/newtube/blob/main/docs/Project_Document.md\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ================================\n// CORE USER MANAGEMENT\n// ================================\n\n/// User accounts with settings and preferences\nmodel User {\n  id          String  @id @default(cuid())\n  email       String  @unique\n  clerkId     String? @unique // Clerk authentication ID\n  username    String? @unique\n  displayName String?\n  avatar      String? // URL to avatar image\n\n  // JSON field for flexible user settings\n  settingsJson Json @default(\"{}\")\n\n  // Timestamps\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  lastLoginAt DateTime?\n\n  // Status and flags\n  isActive   Boolean @default(true)\n  isVerified Boolean @default(false)\n\n  // Relations\n  connections          Connection[]\n  layouts              Layout[]\n  lists                List[]\n  preferences          Preference[]\n  conversationSessions ConversationSession[]\n\n  @@map(\"users\")\n}\n\n// ================================\n// EXTERNAL PLATFORM CONNECTIONS\n// ================================\n\n/// OAuth connections to external platforms (YouTube, Vimeo, Nebula)\nmodel Connection {\n  id       String @id @default(cuid())\n  userId   String\n  provider String // 'youtube', 'vimeo', 'nebula'\n\n  // OAuth data (encrypted)\n  accessTokenEnc  String // Encrypted access token\n  refreshTokenEnc String? // Encrypted refresh token (if available)\n  expiresAt       DateTime? // Token expiration\n\n  // Permission scopes granted\n  scopes String[] @default([])\n\n  // Connection status\n  status     ConnectionStatus @default(ACTIVE)\n  lastSyncAt DateTime?\n\n  // Metadata\n  providerUserId   String? // External platform user ID\n  providerUsername String? // External platform username\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, provider])\n  @@map(\"connections\")\n}\n\nenum ConnectionStatus {\n  ACTIVE\n  EXPIRED\n  REVOKED\n  ERROR\n}\n\n// ================================\n// LAYOUT SYSTEM\n// ================================\n\n/// User-defined dashboard layouts with drag-and-drop panels\nmodel Layout {\n  id     String @id @default(cuid())\n  userId String\n  name   String\n\n  // Layout configuration\n  theme        String? @default(\"default\")\n  gridSpecJson Json // Grid layout specification with panel positions\n\n  // Metadata\n  isDefault   Boolean  @default(false)\n  isPublic    Boolean  @default(false)\n  description String?\n  tags        String[] @default([])\n\n  // Version control\n  version Int @default(1)\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  layoutPanels LayoutPanel[]\n\n  @@map(\"layouts\")\n}\n\n/// Panel library/definitions - reusable panel configurations\nmodel Panel {\n  id   String    @id @default(cuid())\n  type PanelType\n\n  // Panel configuration\n  name        String\n  description String?\n  propsJson   Json    @default(\"{}\") // Default props for this panel type\n\n  // Metadata\n  category  String? // e.g., \"video\", \"social\", \"tools\"\n  tags      String[] @default([])\n  isBuiltIn Boolean  @default(false) // System-defined vs user-created\n\n  // Version control\n  version Int @default(1)\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  layoutPanels LayoutPanel[]\n\n  @@map(\"panels\")\n}\n\n/// Junction table for layouts and their panel instances\nmodel LayoutPanel {\n  id       String @id @default(cuid())\n  layoutId String\n  panelId  String\n\n  // Panel instance configuration\n  propsJson Json @default(\"{}\") // Instance-specific props\n\n  // Grid position and sizing\n  gridX      Int\n  gridY      Int\n  gridWidth  Int\n  gridHeight Int\n\n  // Display options\n  isVisible Boolean @default(true)\n  zIndex    Int     @default(0)\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  layout Layout @relation(fields: [layoutId], references: [id], onDelete: Cascade)\n  panel  Panel  @relation(fields: [panelId], references: [id], onDelete: Cascade)\n\n  @@unique([layoutId, panelId])\n  @@map(\"layout_panels\")\n}\n\nenum PanelType {\n  VIDEO_FEED // Video listing/grid\n  VIDEO_PLAYER // Embedded video player\n  SEARCH // Search interface\n  FILTERS // Content filters\n  PLAYLISTS // Playlist management\n  SUBSCRIPTIONS // Subscription feed\n  TRENDING // Trending content\n  RECOMMENDATIONS // AI recommendations\n  SETTINGS // User settings\n  ANALYTICS // Usage analytics\n  CUSTOM // User-defined custom panel\n}\n\n// ================================\n// USER CONTENT ORGANIZATION\n// ================================\n\n/// User-created lists (playlists, smart lists, etc.)\nmodel List {\n  id     String   @id @default(cuid())\n  userId String\n  name   String\n  type   ListType\n\n  // List configuration\n  description String?\n  isPublic    Boolean @default(false)\n  rulesJson   Json    @default(\"{}\") // Smart list rules or static content\n\n  // Metadata\n  tags      String[] @default([])\n  thumbnail String? // URL to thumbnail image\n  itemCount Int      @default(0)\n\n  // Timestamps\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime  @updatedAt\n  lastSyncAt DateTime?\n\n  // Relations\n  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  listItems ListItem[]\n\n  @@map(\"lists\")\n}\n\nenum ListType {\n  PLAYLIST // Manual playlist\n  SMART // Smart list with rules\n  FAVORITES // User favorites\n  WATCHLIST // Watch later\n  HISTORY // Watch history\n}\n\n/// Items within user lists\nmodel ListItem {\n  id     String @id @default(cuid())\n  listId String\n\n  // External content reference\n  platformId  String // YouTube video ID, Vimeo ID, etc.\n  platform    String // 'youtube', 'vimeo', 'nebula'\n  contentType String @default(\"video\") // Future: audio, article, etc.\n\n  // Cached metadata\n  title        String?\n  description  String?\n  thumbnailUrl String?\n  duration     Int? // Duration in seconds\n  publishedAt  DateTime?\n\n  // List-specific data\n  position Int      @default(0)\n  addedAt  DateTime @default(now())\n  notes    String? // User notes about this item\n\n  // Engagement tracking\n  watchProgress Float?  @default(0) // 0.0 to 1.0\n  rating        Int? // 1-5 stars\n  isFavorite    Boolean @default(false)\n\n  // Relations\n  list List @relation(fields: [listId], references: [id], onDelete: Cascade)\n\n  @@unique([listId, platformId, platform])\n  @@map(\"list_items\")\n}\n\n// ================================\n// USER PREFERENCES & SETTINGS\n// ================================\n\n/// Fine-grained user preferences and settings\nmodel Preference {\n  id     String @id @default(cuid())\n  userId String\n  key    String // Hierarchical key like \"ui.theme\" or \"ai.recommendations.enabled\"\n\n  // Flexible value storage\n  valueJson Json\n\n  // Metadata\n  category    String? // e.g., \"ui\", \"ai\", \"notifications\", \"privacy\"\n  description String?\n  isUserSet   Boolean @default(true) // false for system defaults\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, key])\n  @@map(\"preferences\")\n}\n\n// ================================\n// CONVERSATIONAL TOUR SYSTEM\n// ================================\n\n/// Conversational AI tour sessions for onboarding and interaction\nmodel ConversationSession {\n  id        String  @id @default(cuid())\n  userId    String? // null for anonymous users\n  sessionId String  @unique // For anonymous session tracking\n\n  // Session state\n  currentStep TourStep @default(WELCOME)\n  isCompleted Boolean  @default(false)\n  isVoiceMode Boolean  @default(false)\n\n  // User preferences gathered during conversation\n  selectedInterests String[] @default([])\n  videoRatings      Json     @default(\"{}\") // { videoId: rating }\n  layoutPreferences Json     @default(\"{}\") // Generated layout config\n\n  // LLM provider configuration\n  llmProvider    String? // 'openai', 'gemini', 'groq'\n  llmApiKey      String? // Encrypted user-provided API key\n  conversationId String? // External conversation ID from LLM\n\n  // Progress tracking\n  stepProgress   Json     @default(\"{}\") // Progress within each step\n  completedSteps String[] @default([])\n\n  // Timestamps\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n  lastActiveAt DateTime  @default(now())\n  completedAt  DateTime?\n\n  // Relations\n  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  conversationLogs ConversationLog[]\n  tourInteractions TourInteraction[]\n\n  @@map(\"conversation_sessions\")\n}\n\n/// Individual messages/interactions within a conversation\nmodel ConversationLog {\n  id        String @id @default(cuid())\n  sessionId String\n\n  // Message details\n  role      MessageRole // 'user', 'assistant', 'system'\n  content   String\n  messageId String? // External message ID from LLM\n\n  // Context and metadata\n  tourStep   TourStep?\n  actionType String? // 'question', 'instruction', 'feedback', 'layout_command'\n  metadata   Json      @default(\"{}\")\n\n  // Processing information\n  tokensUsed     Int?\n  responseTimeMs Int?\n  llmProvider    String?\n\n  // Timestamps\n  createdAt DateTime @default(now())\n\n  // Relations\n  session ConversationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  @@map(\"conversation_logs\")\n}\n\n/// Specific tour interactions and user actions\nmodel TourInteraction {\n  id        String @id @default(cuid())\n  sessionId String\n\n  // Interaction details\n  tourStep   TourStep\n  actionType String // 'step_start', 'step_complete', 'user_input', 'ai_suggestion'\n  actionData Json     @default(\"{}\")\n\n  // User engagement\n  timeSpentMs  Int?\n  wasSkipped   Boolean @default(false)\n  satisfaction Int? // 1-5 rating for this interaction\n\n  // Timestamps\n  createdAt DateTime @default(now())\n\n  // Relations\n  session ConversationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  @@map(\"tour_interactions\")\n}\n\nenum TourStep {\n  WELCOME // Initial interface selection (voice/keyboard)\n  INTRODUCTION // AI introduction and NEWTUBE explanation\n  INTERESTS // Interest category discovery\n  VIDEO_RATING // Video rating for personalization\n  LAYOUT_BUILDING // Conversational layout creation\n  REGISTRATION // Account creation and sync\n  COMPLETED // Tour finished\n}\n\nenum MessageRole {\n  USER\n  ASSISTANT\n  SYSTEM\n}\n\n// ================================\n// LOCAL STORAGE SYNC\n// ================================\n\n/// Temporary storage for unregistered user data before account creation\nmodel LocalStorageSync {\n  id        String @id @default(cuid())\n  sessionId String @unique\n\n  // localStorage data from frontend\n  interests      String[] @default([])\n  videoRatings   Json     @default(\"{}\")\n  onboardingStep String?\n  layoutData     Json     @default(\"{}\")\n\n  // Sync metadata\n  isRegistered Boolean   @default(false)\n  userId       String? // Set when user registers\n  syncedAt     DateTime?\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  expiresAt DateTime // Auto-cleanup after 24-48 hours\n\n  @@map(\"local_storage_sync\")\n}\n\n// ================================\n// SYSTEM TABLES\n// ================================\n\n/// Database migrations tracking\nmodel Migration {\n  id         String   @id @default(cuid())\n  name       String   @unique\n  executedAt DateTime @default(now())\n  checksum   String?\n\n  @@map(\"migrations\")\n}\n\n/// System configuration and feature flags\nmodel SystemConfig {\n  id    String @id @default(cuid())\n  key   String @unique\n  value Json\n\n  description String?\n  category    String? // e.g., \"feature_flags\", \"api_limits\", \"maintenance\"\n  isActive    Boolean @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"system_config\")\n}\n\n// ================================\n// INDEXES FOR PERFORMANCE\n// ================================\n\n// Additional indexes are automatically created by Prisma for:\n// - Primary keys (@id)\n// - Unique constraints (@unique)\n// - Foreign key relations\n\n// Custom indexes for query optimization:\n// - User email lookups\n// - Connection status queries\n// - Layout user queries\n// - List item position ordering\n// - Preference key-based lookups\n",
  "inlineSchemaHash": "7d88e90ed85bd01c6197765662310a3e7fed15005e65fa31ffa93b9f0d7b6a2f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"settingsJson\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"connections\",\"kind\":\"object\",\"type\":\"Connection\",\"relationName\":\"ConnectionToUser\"},{\"name\":\"layouts\",\"kind\":\"object\",\"type\":\"Layout\",\"relationName\":\"LayoutToUser\"},{\"name\":\"lists\",\"kind\":\"object\",\"type\":\"List\",\"relationName\":\"ListToUser\"},{\"name\":\"preferences\",\"kind\":\"object\",\"type\":\"Preference\",\"relationName\":\"PreferenceToUser\"},{\"name\":\"conversationSessions\",\"kind\":\"object\",\"type\":\"ConversationSession\",\"relationName\":\"ConversationSessionToUser\"}],\"dbName\":\"users\"},\"Connection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenEnc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshTokenEnc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scopes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ConnectionStatus\"},{\"name\":\"lastSyncAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"providerUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerUsername\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConnectionToUser\"}],\"dbName\":\"connections\"},\"Layout\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"theme\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gridSpecJson\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isDefault\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LayoutToUser\"},{\"name\":\"layoutPanels\",\"kind\":\"object\",\"type\":\"LayoutPanel\",\"relationName\":\"LayoutToLayoutPanel\"}],\"dbName\":\"layouts\"},\"Panel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"PanelType\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"propsJson\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isBuiltIn\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"layoutPanels\",\"kind\":\"object\",\"type\":\"LayoutPanel\",\"relationName\":\"LayoutPanelToPanel\"}],\"dbName\":\"panels\"},\"LayoutPanel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"layoutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"panelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"propsJson\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"gridX\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gridY\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gridWidth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gridHeight\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isVisible\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"zIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"layout\",\"kind\":\"object\",\"type\":\"Layout\",\"relationName\":\"LayoutToLayoutPanel\"},{\"name\":\"panel\",\"kind\":\"object\",\"type\":\"Panel\",\"relationName\":\"LayoutPanelToPanel\"}],\"dbName\":\"layout_panels\"},\"List\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ListType\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rulesJson\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSyncAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ListToUser\"},{\"name\":\"listItems\",\"kind\":\"object\",\"type\":\"ListItem\",\"relationName\":\"ListToListItem\"}],\"dbName\":\"lists\"},\"ListItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"listId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"platformId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"platform\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"addedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"watchProgress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isFavorite\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"list\",\"kind\":\"object\",\"type\":\"List\",\"relationName\":\"ListToListItem\"}],\"dbName\":\"list_items\"},\"Preference\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"valueJson\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isUserSet\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PreferenceToUser\"}],\"dbName\":\"preferences\"},\"ConversationSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentStep\",\"kind\":\"enum\",\"type\":\"TourStep\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isVoiceMode\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"selectedInterests\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoRatings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"layoutPreferences\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"llmProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"llmApiKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stepProgress\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"completedSteps\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastActiveAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationSessionToUser\"},{\"name\":\"conversationLogs\",\"kind\":\"object\",\"type\":\"ConversationLog\",\"relationName\":\"ConversationLogToConversationSession\"},{\"name\":\"tourInteractions\",\"kind\":\"object\",\"type\":\"TourInteraction\",\"relationName\":\"ConversationSessionToTourInteraction\"}],\"dbName\":\"conversation_sessions\"},\"ConversationLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"MessageRole\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tourStep\",\"kind\":\"enum\",\"type\":\"TourStep\"},{\"name\":\"actionType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"tokensUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"responseTimeMs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"llmProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"ConversationSession\",\"relationName\":\"ConversationLogToConversationSession\"}],\"dbName\":\"conversation_logs\"},\"TourInteraction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tourStep\",\"kind\":\"enum\",\"type\":\"TourStep\"},{\"name\":\"actionType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timeSpentMs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wasSkipped\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"satisfaction\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"ConversationSession\",\"relationName\":\"ConversationSessionToTourInteraction\"}],\"dbName\":\"tour_interactions\"},\"LocalStorageSync\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"interests\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoRatings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"onboardingStep\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"layoutData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isRegistered\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"syncedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"local_storage_sync\"},\"Migration\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"executedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"checksum\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"migrations\"},\"SystemConfig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"system_config\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

