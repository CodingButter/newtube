// This file will be generated by GraphQL Code Generator
// For MVP, we'll create a basic interface

export interface Resolvers {
  DateTime?: any;
  JSON?: any;
  Query?: {
    health?: () => string;
    conversation?: (parent: any, args: { id: string }, context: any) => any;
    userConversations?: (parent: any, args: { userId: string; limit?: number; offset?: number }, context: any) => any;
    tourProgress?: (parent: any, args: { userId: string }, context: any) => any;
    tourStep?: (parent: any, args: { stepId: string }, context: any) => any;
    allTourSteps?: (parent: any, args: any, context: any) => any;
    serviceStats?: (parent: any, args: any, context: any) => any;
    tourStats?: (parent: any, args: any, context: any) => any;
  };
  Mutation?: {
    sendMessage?: (parent: any, args: { input: any }, context: any) => any;
    startTour?: (parent: any, args: { userId: string }, context: any) => any;
    updateTourStep?: (parent: any, args: { input: any }, context: any) => any;
    completeTourStep?: (parent: any, args: { input: any }, context: any) => any;
    skipTour?: (parent: any, args: { userId: string }, context: any) => any;
    resetTour?: (parent: any, args: { userId: string }, context: any) => any;
    deleteConversation?: (parent: any, args: { id: string }, context: any) => any;
  };
  Subscription?: {
    messageAdded?: any;
    tourProgressUpdated?: any;
    systemNotification?: any;
  };
}